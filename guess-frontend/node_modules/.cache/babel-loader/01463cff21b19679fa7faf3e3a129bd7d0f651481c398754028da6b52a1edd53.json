{"ast":null,"code":"var _jsxFileName = \"/Users/reecefuller/Documents/guessipedia/guess-frontend/src/components/AutoComplete.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AutoCompleteBar = ({\n  options,\n  onSelect,\n  searchValue,\n  setSearchValue\n}) => {\n  _s();\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  useEffect(() => {\n    if (searchValue) {\n      const filtered = options.filter(option => option.toLowerCase().includes(searchValue.toLowerCase()));\n      setFilteredOptions(filtered);\n    } else {\n      setFilteredOptions([]);\n    }\n    //clear search options when the option typed is a valid option\n    if (searchValue === filteredOptions[0]) {\n      setFilteredOptions([]);\n    }\n  }, [searchValue, options]);\n\n  //set the search value to the option clicked\n  const handleOptionClick = option => {\n    if (filteredOptions.length > 0) {\n      setSearchValue(filteredOptions[0]);\n    }\n  };\n\n  //Handles enter key press and tab autofilling\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      onSelect(searchValue);\n    } else if (event.key === \"Tab\") {\n      event.preventDefault(); // Prevent the default action\n      if (filteredOptions.length > 0) {\n        setSearchValue(filteredOptions[0]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-72\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchValue,\n      onChange: e => setSearchValue(e.target.value),\n      onKeyDown: handleKeyDown,\n      placeholder: \"Guess a wiki...\",\n      className: \"w-full p-2 text-sm border border-gray-300 rounded-md\" // Tailwind CSS classes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 border border-gray-300 rounded-md overflow-auto max-h-48\",\n      children: [\" \", filteredOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOptionClick(option),\n        className: \"p-2 cursor-pointer hover:bg-gray-200\" // Tailwind CSS classes\n        ,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: handleSelect(searchValue),\n      children: \"Go\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoCompleteBar, \"rUDuRQedjga76ZX45O/2fQcSdSY=\");\n_c = AutoCompleteBar;\nexport default AutoCompleteBar;\nvar _c;\n$RefreshReg$(_c, \"AutoCompleteBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AutoCompleteBar","options","onSelect","searchValue","setSearchValue","_s","filteredOptions","setFilteredOptions","filtered","filter","option","toLowerCase","includes","handleOptionClick","length","handleKeyDown","event","key","preventDefault","className","children","type","value","onChange","e","target","onKeyDown","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","handleSelect","_c","$RefreshReg$"],"sources":["/Users/reecefuller/Documents/guessipedia/guess-frontend/src/components/AutoComplete.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const AutoCompleteBar = ({\n  options,\n  onSelect,\n  searchValue,\n  setSearchValue,\n}) => {\n  const [filteredOptions, setFilteredOptions] = useState([]);\n\n  useEffect(() => {\n    if (searchValue) {\n      const filtered = options.filter((option) =>\n        option.toLowerCase().includes(searchValue.toLowerCase())\n      );\n      setFilteredOptions(filtered);\n    } else {\n      setFilteredOptions([]);\n    }\n    //clear search options when the option typed is a valid option\n    if (searchValue === filteredOptions[0]) {\n      setFilteredOptions([]);\n    }\n  }, [searchValue, options]);\n\n  //set the search value to the option clicked\n  const handleOptionClick = (option) => {\n    if (filteredOptions.length > 0) {\n      setSearchValue(filteredOptions[0]);\n    }\n  };\n\n  //Handles enter key press and tab autofilling\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      onSelect(searchValue);\n    } else if (event.key === \"Tab\") {\n      event.preventDefault(); // Prevent the default action\n      if (filteredOptions.length > 0) {\n        setSearchValue(filteredOptions[0]);\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-72\">\n      <input\n        type=\"text\"\n        value={searchValue}\n        onChange={(e) => setSearchValue(e.target.value)}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Guess a wiki...\"\n        className=\"w-full p-2 text-sm border border-gray-300 rounded-md\" // Tailwind CSS classes\n      />\n      <div className=\"mt-2 border border-gray-300 rounded-md overflow-auto max-h-48\">\n        {\" \"}\n        {filteredOptions.map((option, index) => (\n          <div\n            key={index}\n            onClick={() => handleOptionClick(option)}\n            className=\"p-2 cursor-pointer hover:bg-gray-200\" // Tailwind CSS classes\n          >\n            {option}\n          </div>\n        ))}\n      </div>\n      <button className=\"button\" onClick={handleSelect(searchValue)}>\n        Go\n      </button>\n    </div>\n  );\n};\n\nexport default AutoCompleteBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}