{"ast":null,"code":"var _jsxFileName = \"/Users/reecefuller/Documents/guess-ui-draft/src/components/AutoComplete.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AutoCompleteBar = ({\n  options,\n  onSelect,\n  onSearchValueChange\n}) => {\n  _s();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [shouldFetch, setShouldFetch] = useState(false);\n  useEffect(() => {\n    if (searchValue) {\n      const filtered = options.filter(option => option.toLowerCase().includes(searchValue.toLowerCase()));\n      setFilteredOptions(filtered);\n    } else {\n      setFilteredOptions([]);\n    }\n  }, [searchValue, options]);\n  useEffect(() => {\n    if (shouldFetch) {\n      onSearchValueChange(searchValue);\n    }\n  }, [searchValue, shouldFetch]);\n  const handleOptionClick = option => {\n    setSearchValue(option);\n    setFilteredOptions([]);\n  };\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      onSelect(searchValue);\n    } else if (event.key === \"Tab\") {\n      event.preventDefault(); // Prevent the default action\n      if (filteredOptions.length > 0) {\n        setShouldFetch(false);\n        setSearchValue(filteredOptions[0]);\n        setShouldFetch(true);\n      }\n    }\n  };\n  useEffect(() => {\n    if (searchValue === filteredOptions[0]) {\n      setFilteredOptions([]);\n    }\n  }, [searchValue, filteredOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-72\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchValue,\n      onChange: e => setSearchValue(e.target.value),\n      onKeyDown: handleKeyDown,\n      placeholder: \"Search...\",\n      className: \"w-full p-2 text-sm border border-gray-300 rounded-md\" // Tailwind CSS classes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 border border-gray-300 rounded-md overflow-auto max-h-48\",\n      children: [\" \", filteredOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOptionClick(option),\n        className: \"p-2 cursor-pointer hover:bg-gray-200\" // Tailwind CSS classes\n        ,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoCompleteBar, \"8p9uXkVy626bQSnap9lQwntz3tA=\");\n_c = AutoCompleteBar;\nexport default AutoCompleteBar;\nvar _c;\n$RefreshReg$(_c, \"AutoCompleteBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AutoCompleteBar","options","onSelect","onSearchValueChange","_s","searchValue","setSearchValue","filteredOptions","setFilteredOptions","shouldFetch","setShouldFetch","filtered","filter","option","toLowerCase","includes","handleOptionClick","handleKeyDown","event","key","preventDefault","length","className","children","type","value","onChange","e","target","onKeyDown","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/reecefuller/Documents/guess-ui-draft/src/components/AutoComplete.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const AutoCompleteBar = ({ options, onSelect, onSearchValueChange }) => {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [shouldFetch, setShouldFetch] = useState(false);\n\n  useEffect(() => {\n    if (searchValue) {\n      const filtered = options.filter((option) =>\n        option.toLowerCase().includes(searchValue.toLowerCase())\n      );\n      setFilteredOptions(filtered);\n    } else {\n      setFilteredOptions([]);\n    }\n  }, [searchValue, options]);\n\n  useEffect(() => {\n    if (shouldFetch) {\n      onSearchValueChange(searchValue);\n    }\n  }, [searchValue, shouldFetch]);\n  const handleOptionClick = (option) => {\n    setSearchValue(option);\n    setFilteredOptions([]);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      onSelect(searchValue);\n    } else if (event.key === \"Tab\") {\n      event.preventDefault(); // Prevent the default action\n      if (filteredOptions.length > 0) {\n        setShouldFetch(false);\n        setSearchValue(filteredOptions[0]);\n        setShouldFetch(true);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (searchValue === filteredOptions[0]) {\n      setFilteredOptions([]);\n    }\n  }, [searchValue, filteredOptions]);\n\n  return (\n    <div className=\"w-72\">\n      <input\n        type=\"text\"\n        value={searchValue}\n        onChange={(e) => setSearchValue(e.target.value)}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Search...\"\n        className=\"w-full p-2 text-sm border border-gray-300 rounded-md\" // Tailwind CSS classes\n      />\n      <div className=\"mt-2 border border-gray-300 rounded-md overflow-auto max-h-48\">\n        {\" \"}\n        {/* Tailwind CSS classes */}\n        {filteredOptions.map((option, index) => (\n          <div\n            key={index}\n            onClick={() => handleOptionClick(option)}\n            className=\"p-2 cursor-pointer hover:bg-gray-200\" // Tailwind CSS classes\n          >\n            {option}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AutoCompleteBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}